    path = \"datasets/rosalind_prot.txt\"
    code = {\"A\": [\"GCU\",\"GCC\", \"GCA\",\"GCG\"], \"V\": [\"GUU\",\"GUA\",\"GUC\",\"GUG\"], \"I\": [\"AUU\", \"AUC\", \"AUA\"],\"M\":[\"AUG\"], \"L\": [\"CUU\",\"CUC\", \"CUG\", \"CUA\", \"UUA\",\"UUG\"],\"F\": [\"UUU\", \"UUC\"], \"S\": [\"UCU\",\"UCC\",\"UCA\",\"UCG\",\"AGU\",\"AGC\"], \"P\": [\"CCU\", \"CCC\",\"CCA\",\"CCG\"],\"T\": [\"ACU\",\"ACA\",\"ACC\",\"ACG\"], \"E\": [\"GAA\",\"GAG\"], \"D\":[\"GAU\", \"GAC\"], \"N\":[\"AAU\",\"AAC\"],\"K\":[\"AAA\",\"AAG\"], \"Q\":[\"CAA\", \"CAG\"], \"H\":[\"CAU\",\"CAC\"], \"Y\": [\"UAU\",\"UAC\"], \"C\": [\"UGU\",\"UGC\"], \"W\":[\"UGG\"],\"R\":[\"CGA\",\"CGC\",\"CGU\",\"CGG\",\"AGA\",\"AGG\"], \"G\":[\"GGU\",\"GGC\",\"GGA\",\"GGG\"], \"STOP\":[\"UGA\",\"UAA\",\"UAG\"]} ##genetic code\n
    aa_all = \"ACDEFGHIKLMNPQRSTVWY\" #all protein-building amino acids
    def translate(path):
        codon_len = 3
        peptide = []
        final = []
        with open(path) as file:
            for line in file:
                length = len(line.rstrip())
                if length%3 != 0:          ##the RNA sequence should have multiplications of 3, so the codon number will be integer.
                    return \"Error in length! final codon is not complete, or frame shift happened.\"
                for i in range(0,length-codon_len+1,codon_len):          ##we slide a window from 0 to the base that preceeds the final one by 2 (so that final window will cover the bases (n-2,n-1,n)), jumping by one codon (we don't overlap windows in translation)
                    codon = line[i:i+codon_len]      #the specific window of 1 codon is from the current position to the same position further 3 steps (codon length)
                    for x in codon:
                        if not x in \"ACGU\":
                            return \"Error in sequence at position \" + str(i)     ### make sure the sequence has only valid RNA bases
                    for aa in range(len(aa_all)):            ## we take each aa from the whole string of aa symbols as a variable
                        symbol = aa_all[aa]                   
                        if codon in code[symbol]:            # we chack if the codon is in the list of that chosen aa (if not, the loop will run another aa until TRUE)
                            peptide.append(symbol)
                        elif codon in code[\"STOP\"] and i+3 < length: # if there is a stop codon before the end of the sequence, this should catch it
                                final.append(\"\".join(peptide))            ### and finish the peptide there
                                return \"\\n\".join(final)+\"\\n\"+\"Warning of premature Stop at position: \" + str(i)
                final.append(\"\".join(peptide)) 
                peptide = [] ## this will empty the peptide concatenation list in case there are multiple lines
        return join(final)
    
    print(translate(path))
   
