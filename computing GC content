    path = \"datasets/rosalind_gc.txt\"
 
    def GCprocess(dna):
        dna_up = dna.upper()
        gc_perc = (dna_up.count(\"C\")+dna_up.count(\"G\"))/(len(dna_up)) #GC content is (count of G + count of C)/total bases
        return round(100*gc_perc, 6)
    
    def manipulate(path):
        id_dict = {}
        gc_perc_dict = {}
        id_gc_pair_dict = {}
        seq = ""
        with open(path) as file:
            for line in file:
                if line.startswith(">"):
                    id_dict[line[1:].rstrip()] = 0
        with open(path) as file:
            for line in file:
                if not line.startswith(\">\"):     #Condition repeats and concatenates lines of each sequence until new \">\"
                    seq += line.rstrip()
                elif seq != \"\":                  #Condition applies when a new \">\" happens, so records the GC_perc for the previous seq above the new \">\"
                    gc_perc_dict[GCprocess(seq)] = 0
                    seq = \"\"                   #Emptying the seq string for concatenating a new sequence
            gc_perc_dict[GCprocess(seq)] = 0       #For including the GC_perc of the last sequence because no new \">\" will happen
        for i in range(len(gc_perc_dict.keys())):   #the loop for matching each ID with the corresponding GC content of the seq.
            k = list(id_dict.keys())[i]
            v = list(gc_perc_dict.keys())[i]
            id_gc_pair_dict[k] = v
        return id_gc_pair_dict
    
    def match(path):
        pairs = manipulate(path)           #means the pairs: ID,GC_perc in a dictionary
        gc = list(pairs.values())
        max_gc = max(gc)
        rosalind_id = \"\"
        for ID,GC in pairs.items():        #compare values of GC in dict, if one value is equal to the max value, then take the corresponding id
            if GC == max_gc:
                rosalind_id = ID
        return f\"{rosalind_id}\\n{max_gc}\"   #and put them in a convenient format
    
    "print(match(path))"
   ]
  }
